// Code generated by MockGen. DO NOT EDIT.
// Source: ./fixtures.go
//
// Generated by this command:
//
//	mockgen -typed -write_package_comment=false -source ./fixtures.go -destination ./mocks.gen.go -package tioz
//

package tioz

import (
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTestByteReader is a mock of TestByteReader interface.
type MockTestByteReader struct {
	ctrl     *gomock.Controller
	recorder *MockTestByteReaderMockRecorder
	isgomock struct{}
}

// MockTestByteReaderMockRecorder is the mock recorder for MockTestByteReader.
type MockTestByteReaderMockRecorder struct {
	mock *MockTestByteReader
}

// NewMockTestByteReader creates a new mock instance.
func NewMockTestByteReader(ctrl *gomock.Controller) *MockTestByteReader {
	mock := &MockTestByteReader{ctrl: ctrl}
	mock.recorder = &MockTestByteReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestByteReader) EXPECT() *MockTestByteReaderMockRecorder {
	return m.recorder
}

// ReadByte mocks base method.
func (m *MockTestByteReader) ReadByte() (byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByte")
	ret0, _ := ret[0].(byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByte indicates an expected call of ReadByte.
func (mr *MockTestByteReaderMockRecorder) ReadByte() *MockTestByteReaderReadByteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByte", reflect.TypeOf((*MockTestByteReader)(nil).ReadByte))
	return &MockTestByteReaderReadByteCall{Call: call}
}

// MockTestByteReaderReadByteCall wrap *gomock.Call
type MockTestByteReaderReadByteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestByteReaderReadByteCall) Return(arg0 byte, arg1 error) *MockTestByteReaderReadByteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestByteReaderReadByteCall) Do(f func() (byte, error)) *MockTestByteReaderReadByteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestByteReaderReadByteCall) DoAndReturn(f func() (byte, error)) *MockTestByteReaderReadByteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestByteScanner is a mock of TestByteScanner interface.
type MockTestByteScanner struct {
	ctrl     *gomock.Controller
	recorder *MockTestByteScannerMockRecorder
	isgomock struct{}
}

// MockTestByteScannerMockRecorder is the mock recorder for MockTestByteScanner.
type MockTestByteScannerMockRecorder struct {
	mock *MockTestByteScanner
}

// NewMockTestByteScanner creates a new mock instance.
func NewMockTestByteScanner(ctrl *gomock.Controller) *MockTestByteScanner {
	mock := &MockTestByteScanner{ctrl: ctrl}
	mock.recorder = &MockTestByteScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestByteScanner) EXPECT() *MockTestByteScannerMockRecorder {
	return m.recorder
}

// ReadByte mocks base method.
func (m *MockTestByteScanner) ReadByte() (byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByte")
	ret0, _ := ret[0].(byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByte indicates an expected call of ReadByte.
func (mr *MockTestByteScannerMockRecorder) ReadByte() *MockTestByteScannerReadByteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByte", reflect.TypeOf((*MockTestByteScanner)(nil).ReadByte))
	return &MockTestByteScannerReadByteCall{Call: call}
}

// MockTestByteScannerReadByteCall wrap *gomock.Call
type MockTestByteScannerReadByteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestByteScannerReadByteCall) Return(arg0 byte, arg1 error) *MockTestByteScannerReadByteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestByteScannerReadByteCall) Do(f func() (byte, error)) *MockTestByteScannerReadByteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestByteScannerReadByteCall) DoAndReturn(f func() (byte, error)) *MockTestByteScannerReadByteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnreadByte mocks base method.
func (m *MockTestByteScanner) UnreadByte() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnreadByte")
	ret0, _ := ret[0].(error)
	return ret0
}

// UnreadByte indicates an expected call of UnreadByte.
func (mr *MockTestByteScannerMockRecorder) UnreadByte() *MockTestByteScannerUnreadByteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnreadByte", reflect.TypeOf((*MockTestByteScanner)(nil).UnreadByte))
	return &MockTestByteScannerUnreadByteCall{Call: call}
}

// MockTestByteScannerUnreadByteCall wrap *gomock.Call
type MockTestByteScannerUnreadByteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestByteScannerUnreadByteCall) Return(arg0 error) *MockTestByteScannerUnreadByteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestByteScannerUnreadByteCall) Do(f func() error) *MockTestByteScannerUnreadByteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestByteScannerUnreadByteCall) DoAndReturn(f func() error) *MockTestByteScannerUnreadByteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestByteWriter is a mock of TestByteWriter interface.
type MockTestByteWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTestByteWriterMockRecorder
	isgomock struct{}
}

// MockTestByteWriterMockRecorder is the mock recorder for MockTestByteWriter.
type MockTestByteWriterMockRecorder struct {
	mock *MockTestByteWriter
}

// NewMockTestByteWriter creates a new mock instance.
func NewMockTestByteWriter(ctrl *gomock.Controller) *MockTestByteWriter {
	mock := &MockTestByteWriter{ctrl: ctrl}
	mock.recorder = &MockTestByteWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestByteWriter) EXPECT() *MockTestByteWriterMockRecorder {
	return m.recorder
}

// WriteByte mocks base method.
func (m *MockTestByteWriter) WriteByte(c byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteByte", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteByte indicates an expected call of WriteByte.
func (mr *MockTestByteWriterMockRecorder) WriteByte(c any) *MockTestByteWriterWriteByteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteByte", reflect.TypeOf((*MockTestByteWriter)(nil).WriteByte), c)
	return &MockTestByteWriterWriteByteCall{Call: call}
}

// MockTestByteWriterWriteByteCall wrap *gomock.Call
type MockTestByteWriterWriteByteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockTestByteWriterWriteByteCall) Return(arg0 error) *MockTestByteWriterWriteByteCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockTestByteWriterWriteByteCall) Do(f func(byte) error) *MockTestByteWriterWriteByteCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockTestByteWriterWriteByteCall) DoAndReturn(f func(byte) error) *MockTestByteWriterWriteByteCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// MockTestCloser is a mock of TestCloser interface.
type MockTestCloser struct {
	ctrl     *gomock.Controller
	recorder *MockTestCloserMockRecorder
	isgomock struct{}
}

// MockTestCloserMockRecorder is the mock recorder for MockTestCloser.
type MockTestCloserMockRecorder struct {
	mock *MockTestCloser
}

// NewMockTestCloser creates a new mock instance.
func NewMockTestCloser(ctrl *gomock.Controller) *MockTestCloser {
	mock := &MockTestCloser{ctrl: ctrl}
	mock.recorder = &MockTestCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestCloser) EXPECT() *MockTestCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTestCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTestCloserMockRecorder) Close() *MockTestCloserCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTestCloser)(nil).Close))
	return &MockTestCloserCloseCall{Call: call}
}

// MockTestCloserCloseCall wrap *gomock.Call
type MockTestCloserCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestCloserCloseCall) Return(arg0 error) *MockTestCloserCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestCloserCloseCall) Do(f func() error) *MockTestCloserCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestCloserCloseCall) DoAndReturn(f func() error) *MockTestCloserCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestReadCloser is a mock of TestReadCloser interface.
type MockTestReadCloser struct {
	ctrl     *gomock.Controller
	recorder *MockTestReadCloserMockRecorder
	isgomock struct{}
}

// MockTestReadCloserMockRecorder is the mock recorder for MockTestReadCloser.
type MockTestReadCloserMockRecorder struct {
	mock *MockTestReadCloser
}

// NewMockTestReadCloser creates a new mock instance.
func NewMockTestReadCloser(ctrl *gomock.Controller) *MockTestReadCloser {
	mock := &MockTestReadCloser{ctrl: ctrl}
	mock.recorder = &MockTestReadCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestReadCloser) EXPECT() *MockTestReadCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTestReadCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTestReadCloserMockRecorder) Close() *MockTestReadCloserCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTestReadCloser)(nil).Close))
	return &MockTestReadCloserCloseCall{Call: call}
}

// MockTestReadCloserCloseCall wrap *gomock.Call
type MockTestReadCloserCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestReadCloserCloseCall) Return(arg0 error) *MockTestReadCloserCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestReadCloserCloseCall) Do(f func() error) *MockTestReadCloserCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestReadCloserCloseCall) DoAndReturn(f func() error) *MockTestReadCloserCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Read mocks base method.
func (m *MockTestReadCloser) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockTestReadCloserMockRecorder) Read(p any) *MockTestReadCloserReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTestReadCloser)(nil).Read), p)
	return &MockTestReadCloserReadCall{Call: call}
}

// MockTestReadCloserReadCall wrap *gomock.Call
type MockTestReadCloserReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestReadCloserReadCall) Return(n int, err error) *MockTestReadCloserReadCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestReadCloserReadCall) Do(f func([]byte) (int, error)) *MockTestReadCloserReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestReadCloserReadCall) DoAndReturn(f func([]byte) (int, error)) *MockTestReadCloserReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestReadSeekCloser is a mock of TestReadSeekCloser interface.
type MockTestReadSeekCloser struct {
	ctrl     *gomock.Controller
	recorder *MockTestReadSeekCloserMockRecorder
	isgomock struct{}
}

// MockTestReadSeekCloserMockRecorder is the mock recorder for MockTestReadSeekCloser.
type MockTestReadSeekCloserMockRecorder struct {
	mock *MockTestReadSeekCloser
}

// NewMockTestReadSeekCloser creates a new mock instance.
func NewMockTestReadSeekCloser(ctrl *gomock.Controller) *MockTestReadSeekCloser {
	mock := &MockTestReadSeekCloser{ctrl: ctrl}
	mock.recorder = &MockTestReadSeekCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestReadSeekCloser) EXPECT() *MockTestReadSeekCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTestReadSeekCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTestReadSeekCloserMockRecorder) Close() *MockTestReadSeekCloserCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTestReadSeekCloser)(nil).Close))
	return &MockTestReadSeekCloserCloseCall{Call: call}
}

// MockTestReadSeekCloserCloseCall wrap *gomock.Call
type MockTestReadSeekCloserCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestReadSeekCloserCloseCall) Return(arg0 error) *MockTestReadSeekCloserCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestReadSeekCloserCloseCall) Do(f func() error) *MockTestReadSeekCloserCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestReadSeekCloserCloseCall) DoAndReturn(f func() error) *MockTestReadSeekCloserCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Read mocks base method.
func (m *MockTestReadSeekCloser) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockTestReadSeekCloserMockRecorder) Read(p any) *MockTestReadSeekCloserReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTestReadSeekCloser)(nil).Read), p)
	return &MockTestReadSeekCloserReadCall{Call: call}
}

// MockTestReadSeekCloserReadCall wrap *gomock.Call
type MockTestReadSeekCloserReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestReadSeekCloserReadCall) Return(n int, err error) *MockTestReadSeekCloserReadCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestReadSeekCloserReadCall) Do(f func([]byte) (int, error)) *MockTestReadSeekCloserReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestReadSeekCloserReadCall) DoAndReturn(f func([]byte) (int, error)) *MockTestReadSeekCloserReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Seek mocks base method.
func (m *MockTestReadSeekCloser) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockTestReadSeekCloserMockRecorder) Seek(offset, whence any) *MockTestReadSeekCloserSeekCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockTestReadSeekCloser)(nil).Seek), offset, whence)
	return &MockTestReadSeekCloserSeekCall{Call: call}
}

// MockTestReadSeekCloserSeekCall wrap *gomock.Call
type MockTestReadSeekCloserSeekCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestReadSeekCloserSeekCall) Return(arg0 int64, arg1 error) *MockTestReadSeekCloserSeekCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestReadSeekCloserSeekCall) Do(f func(int64, int) (int64, error)) *MockTestReadSeekCloserSeekCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestReadSeekCloserSeekCall) DoAndReturn(f func(int64, int) (int64, error)) *MockTestReadSeekCloserSeekCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestReadSeeker is a mock of TestReadSeeker interface.
type MockTestReadSeeker struct {
	ctrl     *gomock.Controller
	recorder *MockTestReadSeekerMockRecorder
	isgomock struct{}
}

// MockTestReadSeekerMockRecorder is the mock recorder for MockTestReadSeeker.
type MockTestReadSeekerMockRecorder struct {
	mock *MockTestReadSeeker
}

// NewMockTestReadSeeker creates a new mock instance.
func NewMockTestReadSeeker(ctrl *gomock.Controller) *MockTestReadSeeker {
	mock := &MockTestReadSeeker{ctrl: ctrl}
	mock.recorder = &MockTestReadSeekerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestReadSeeker) EXPECT() *MockTestReadSeekerMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockTestReadSeeker) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockTestReadSeekerMockRecorder) Read(p any) *MockTestReadSeekerReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTestReadSeeker)(nil).Read), p)
	return &MockTestReadSeekerReadCall{Call: call}
}

// MockTestReadSeekerReadCall wrap *gomock.Call
type MockTestReadSeekerReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestReadSeekerReadCall) Return(n int, err error) *MockTestReadSeekerReadCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestReadSeekerReadCall) Do(f func([]byte) (int, error)) *MockTestReadSeekerReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestReadSeekerReadCall) DoAndReturn(f func([]byte) (int, error)) *MockTestReadSeekerReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Seek mocks base method.
func (m *MockTestReadSeeker) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockTestReadSeekerMockRecorder) Seek(offset, whence any) *MockTestReadSeekerSeekCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockTestReadSeeker)(nil).Seek), offset, whence)
	return &MockTestReadSeekerSeekCall{Call: call}
}

// MockTestReadSeekerSeekCall wrap *gomock.Call
type MockTestReadSeekerSeekCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestReadSeekerSeekCall) Return(arg0 int64, arg1 error) *MockTestReadSeekerSeekCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestReadSeekerSeekCall) Do(f func(int64, int) (int64, error)) *MockTestReadSeekerSeekCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestReadSeekerSeekCall) DoAndReturn(f func(int64, int) (int64, error)) *MockTestReadSeekerSeekCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestReadWriteCloser is a mock of TestReadWriteCloser interface.
type MockTestReadWriteCloser struct {
	ctrl     *gomock.Controller
	recorder *MockTestReadWriteCloserMockRecorder
	isgomock struct{}
}

// MockTestReadWriteCloserMockRecorder is the mock recorder for MockTestReadWriteCloser.
type MockTestReadWriteCloserMockRecorder struct {
	mock *MockTestReadWriteCloser
}

// NewMockTestReadWriteCloser creates a new mock instance.
func NewMockTestReadWriteCloser(ctrl *gomock.Controller) *MockTestReadWriteCloser {
	mock := &MockTestReadWriteCloser{ctrl: ctrl}
	mock.recorder = &MockTestReadWriteCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestReadWriteCloser) EXPECT() *MockTestReadWriteCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTestReadWriteCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTestReadWriteCloserMockRecorder) Close() *MockTestReadWriteCloserCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTestReadWriteCloser)(nil).Close))
	return &MockTestReadWriteCloserCloseCall{Call: call}
}

// MockTestReadWriteCloserCloseCall wrap *gomock.Call
type MockTestReadWriteCloserCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestReadWriteCloserCloseCall) Return(arg0 error) *MockTestReadWriteCloserCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestReadWriteCloserCloseCall) Do(f func() error) *MockTestReadWriteCloserCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestReadWriteCloserCloseCall) DoAndReturn(f func() error) *MockTestReadWriteCloserCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Read mocks base method.
func (m *MockTestReadWriteCloser) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockTestReadWriteCloserMockRecorder) Read(p any) *MockTestReadWriteCloserReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTestReadWriteCloser)(nil).Read), p)
	return &MockTestReadWriteCloserReadCall{Call: call}
}

// MockTestReadWriteCloserReadCall wrap *gomock.Call
type MockTestReadWriteCloserReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestReadWriteCloserReadCall) Return(n int, err error) *MockTestReadWriteCloserReadCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestReadWriteCloserReadCall) Do(f func([]byte) (int, error)) *MockTestReadWriteCloserReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestReadWriteCloserReadCall) DoAndReturn(f func([]byte) (int, error)) *MockTestReadWriteCloserReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockTestReadWriteCloser) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockTestReadWriteCloserMockRecorder) Write(p any) *MockTestReadWriteCloserWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockTestReadWriteCloser)(nil).Write), p)
	return &MockTestReadWriteCloserWriteCall{Call: call}
}

// MockTestReadWriteCloserWriteCall wrap *gomock.Call
type MockTestReadWriteCloserWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestReadWriteCloserWriteCall) Return(n int, err error) *MockTestReadWriteCloserWriteCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestReadWriteCloserWriteCall) Do(f func([]byte) (int, error)) *MockTestReadWriteCloserWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestReadWriteCloserWriteCall) DoAndReturn(f func([]byte) (int, error)) *MockTestReadWriteCloserWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestReadWriteSeeker is a mock of TestReadWriteSeeker interface.
type MockTestReadWriteSeeker struct {
	ctrl     *gomock.Controller
	recorder *MockTestReadWriteSeekerMockRecorder
	isgomock struct{}
}

// MockTestReadWriteSeekerMockRecorder is the mock recorder for MockTestReadWriteSeeker.
type MockTestReadWriteSeekerMockRecorder struct {
	mock *MockTestReadWriteSeeker
}

// NewMockTestReadWriteSeeker creates a new mock instance.
func NewMockTestReadWriteSeeker(ctrl *gomock.Controller) *MockTestReadWriteSeeker {
	mock := &MockTestReadWriteSeeker{ctrl: ctrl}
	mock.recorder = &MockTestReadWriteSeekerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestReadWriteSeeker) EXPECT() *MockTestReadWriteSeekerMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockTestReadWriteSeeker) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockTestReadWriteSeekerMockRecorder) Read(p any) *MockTestReadWriteSeekerReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTestReadWriteSeeker)(nil).Read), p)
	return &MockTestReadWriteSeekerReadCall{Call: call}
}

// MockTestReadWriteSeekerReadCall wrap *gomock.Call
type MockTestReadWriteSeekerReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestReadWriteSeekerReadCall) Return(n int, err error) *MockTestReadWriteSeekerReadCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestReadWriteSeekerReadCall) Do(f func([]byte) (int, error)) *MockTestReadWriteSeekerReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestReadWriteSeekerReadCall) DoAndReturn(f func([]byte) (int, error)) *MockTestReadWriteSeekerReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Seek mocks base method.
func (m *MockTestReadWriteSeeker) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockTestReadWriteSeekerMockRecorder) Seek(offset, whence any) *MockTestReadWriteSeekerSeekCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockTestReadWriteSeeker)(nil).Seek), offset, whence)
	return &MockTestReadWriteSeekerSeekCall{Call: call}
}

// MockTestReadWriteSeekerSeekCall wrap *gomock.Call
type MockTestReadWriteSeekerSeekCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestReadWriteSeekerSeekCall) Return(arg0 int64, arg1 error) *MockTestReadWriteSeekerSeekCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestReadWriteSeekerSeekCall) Do(f func(int64, int) (int64, error)) *MockTestReadWriteSeekerSeekCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestReadWriteSeekerSeekCall) DoAndReturn(f func(int64, int) (int64, error)) *MockTestReadWriteSeekerSeekCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockTestReadWriteSeeker) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockTestReadWriteSeekerMockRecorder) Write(p any) *MockTestReadWriteSeekerWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockTestReadWriteSeeker)(nil).Write), p)
	return &MockTestReadWriteSeekerWriteCall{Call: call}
}

// MockTestReadWriteSeekerWriteCall wrap *gomock.Call
type MockTestReadWriteSeekerWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestReadWriteSeekerWriteCall) Return(n int, err error) *MockTestReadWriteSeekerWriteCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestReadWriteSeekerWriteCall) Do(f func([]byte) (int, error)) *MockTestReadWriteSeekerWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestReadWriteSeekerWriteCall) DoAndReturn(f func([]byte) (int, error)) *MockTestReadWriteSeekerWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestReadWriter is a mock of TestReadWriter interface.
type MockTestReadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTestReadWriterMockRecorder
	isgomock struct{}
}

// MockTestReadWriterMockRecorder is the mock recorder for MockTestReadWriter.
type MockTestReadWriterMockRecorder struct {
	mock *MockTestReadWriter
}

// NewMockTestReadWriter creates a new mock instance.
func NewMockTestReadWriter(ctrl *gomock.Controller) *MockTestReadWriter {
	mock := &MockTestReadWriter{ctrl: ctrl}
	mock.recorder = &MockTestReadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestReadWriter) EXPECT() *MockTestReadWriterMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockTestReadWriter) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockTestReadWriterMockRecorder) Read(p any) *MockTestReadWriterReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTestReadWriter)(nil).Read), p)
	return &MockTestReadWriterReadCall{Call: call}
}

// MockTestReadWriterReadCall wrap *gomock.Call
type MockTestReadWriterReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestReadWriterReadCall) Return(n int, err error) *MockTestReadWriterReadCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestReadWriterReadCall) Do(f func([]byte) (int, error)) *MockTestReadWriterReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestReadWriterReadCall) DoAndReturn(f func([]byte) (int, error)) *MockTestReadWriterReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockTestReadWriter) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockTestReadWriterMockRecorder) Write(p any) *MockTestReadWriterWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockTestReadWriter)(nil).Write), p)
	return &MockTestReadWriterWriteCall{Call: call}
}

// MockTestReadWriterWriteCall wrap *gomock.Call
type MockTestReadWriterWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestReadWriterWriteCall) Return(n int, err error) *MockTestReadWriterWriteCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestReadWriterWriteCall) Do(f func([]byte) (int, error)) *MockTestReadWriterWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestReadWriterWriteCall) DoAndReturn(f func([]byte) (int, error)) *MockTestReadWriterWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestReader is a mock of TestReader interface.
type MockTestReader struct {
	ctrl     *gomock.Controller
	recorder *MockTestReaderMockRecorder
	isgomock struct{}
}

// MockTestReaderMockRecorder is the mock recorder for MockTestReader.
type MockTestReaderMockRecorder struct {
	mock *MockTestReader
}

// NewMockTestReader creates a new mock instance.
func NewMockTestReader(ctrl *gomock.Controller) *MockTestReader {
	mock := &MockTestReader{ctrl: ctrl}
	mock.recorder = &MockTestReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestReader) EXPECT() *MockTestReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockTestReader) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockTestReaderMockRecorder) Read(p any) *MockTestReaderReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTestReader)(nil).Read), p)
	return &MockTestReaderReadCall{Call: call}
}

// MockTestReaderReadCall wrap *gomock.Call
type MockTestReaderReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestReaderReadCall) Return(n int, err error) *MockTestReaderReadCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestReaderReadCall) Do(f func([]byte) (int, error)) *MockTestReaderReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestReaderReadCall) DoAndReturn(f func([]byte) (int, error)) *MockTestReaderReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestReaderAt is a mock of TestReaderAt interface.
type MockTestReaderAt struct {
	ctrl     *gomock.Controller
	recorder *MockTestReaderAtMockRecorder
	isgomock struct{}
}

// MockTestReaderAtMockRecorder is the mock recorder for MockTestReaderAt.
type MockTestReaderAtMockRecorder struct {
	mock *MockTestReaderAt
}

// NewMockTestReaderAt creates a new mock instance.
func NewMockTestReaderAt(ctrl *gomock.Controller) *MockTestReaderAt {
	mock := &MockTestReaderAt{ctrl: ctrl}
	mock.recorder = &MockTestReaderAtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestReaderAt) EXPECT() *MockTestReaderAtMockRecorder {
	return m.recorder
}

// ReadAt mocks base method.
func (m *MockTestReaderAt) ReadAt(p []byte, off int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAt", p, off)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAt indicates an expected call of ReadAt.
func (mr *MockTestReaderAtMockRecorder) ReadAt(p, off any) *MockTestReaderAtReadAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAt", reflect.TypeOf((*MockTestReaderAt)(nil).ReadAt), p, off)
	return &MockTestReaderAtReadAtCall{Call: call}
}

// MockTestReaderAtReadAtCall wrap *gomock.Call
type MockTestReaderAtReadAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestReaderAtReadAtCall) Return(n int, err error) *MockTestReaderAtReadAtCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestReaderAtReadAtCall) Do(f func([]byte, int64) (int, error)) *MockTestReaderAtReadAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestReaderAtReadAtCall) DoAndReturn(f func([]byte, int64) (int, error)) *MockTestReaderAtReadAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestReaderFrom is a mock of TestReaderFrom interface.
type MockTestReaderFrom struct {
	ctrl     *gomock.Controller
	recorder *MockTestReaderFromMockRecorder
	isgomock struct{}
}

// MockTestReaderFromMockRecorder is the mock recorder for MockTestReaderFrom.
type MockTestReaderFromMockRecorder struct {
	mock *MockTestReaderFrom
}

// NewMockTestReaderFrom creates a new mock instance.
func NewMockTestReaderFrom(ctrl *gomock.Controller) *MockTestReaderFrom {
	mock := &MockTestReaderFrom{ctrl: ctrl}
	mock.recorder = &MockTestReaderFromMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestReaderFrom) EXPECT() *MockTestReaderFromMockRecorder {
	return m.recorder
}

// ReadFrom mocks base method.
func (m *MockTestReaderFrom) ReadFrom(r io.Reader) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFrom", r)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFrom indicates an expected call of ReadFrom.
func (mr *MockTestReaderFromMockRecorder) ReadFrom(r any) *MockTestReaderFromReadFromCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFrom", reflect.TypeOf((*MockTestReaderFrom)(nil).ReadFrom), r)
	return &MockTestReaderFromReadFromCall{Call: call}
}

// MockTestReaderFromReadFromCall wrap *gomock.Call
type MockTestReaderFromReadFromCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestReaderFromReadFromCall) Return(n int64, err error) *MockTestReaderFromReadFromCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestReaderFromReadFromCall) Do(f func(io.Reader) (int64, error)) *MockTestReaderFromReadFromCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestReaderFromReadFromCall) DoAndReturn(f func(io.Reader) (int64, error)) *MockTestReaderFromReadFromCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestRuneReader is a mock of TestRuneReader interface.
type MockTestRuneReader struct {
	ctrl     *gomock.Controller
	recorder *MockTestRuneReaderMockRecorder
	isgomock struct{}
}

// MockTestRuneReaderMockRecorder is the mock recorder for MockTestRuneReader.
type MockTestRuneReaderMockRecorder struct {
	mock *MockTestRuneReader
}

// NewMockTestRuneReader creates a new mock instance.
func NewMockTestRuneReader(ctrl *gomock.Controller) *MockTestRuneReader {
	mock := &MockTestRuneReader{ctrl: ctrl}
	mock.recorder = &MockTestRuneReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestRuneReader) EXPECT() *MockTestRuneReaderMockRecorder {
	return m.recorder
}

// ReadRune mocks base method.
func (m *MockTestRuneReader) ReadRune() (rune, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRune")
	ret0, _ := ret[0].(rune)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadRune indicates an expected call of ReadRune.
func (mr *MockTestRuneReaderMockRecorder) ReadRune() *MockTestRuneReaderReadRuneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRune", reflect.TypeOf((*MockTestRuneReader)(nil).ReadRune))
	return &MockTestRuneReaderReadRuneCall{Call: call}
}

// MockTestRuneReaderReadRuneCall wrap *gomock.Call
type MockTestRuneReaderReadRuneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestRuneReaderReadRuneCall) Return(r rune, size int, err error) *MockTestRuneReaderReadRuneCall {
	c.Call = c.Call.Return(r, size, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestRuneReaderReadRuneCall) Do(f func() (rune, int, error)) *MockTestRuneReaderReadRuneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestRuneReaderReadRuneCall) DoAndReturn(f func() (rune, int, error)) *MockTestRuneReaderReadRuneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestRuneScanner is a mock of TestRuneScanner interface.
type MockTestRuneScanner struct {
	ctrl     *gomock.Controller
	recorder *MockTestRuneScannerMockRecorder
	isgomock struct{}
}

// MockTestRuneScannerMockRecorder is the mock recorder for MockTestRuneScanner.
type MockTestRuneScannerMockRecorder struct {
	mock *MockTestRuneScanner
}

// NewMockTestRuneScanner creates a new mock instance.
func NewMockTestRuneScanner(ctrl *gomock.Controller) *MockTestRuneScanner {
	mock := &MockTestRuneScanner{ctrl: ctrl}
	mock.recorder = &MockTestRuneScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestRuneScanner) EXPECT() *MockTestRuneScannerMockRecorder {
	return m.recorder
}

// ReadRune mocks base method.
func (m *MockTestRuneScanner) ReadRune() (rune, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRune")
	ret0, _ := ret[0].(rune)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadRune indicates an expected call of ReadRune.
func (mr *MockTestRuneScannerMockRecorder) ReadRune() *MockTestRuneScannerReadRuneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRune", reflect.TypeOf((*MockTestRuneScanner)(nil).ReadRune))
	return &MockTestRuneScannerReadRuneCall{Call: call}
}

// MockTestRuneScannerReadRuneCall wrap *gomock.Call
type MockTestRuneScannerReadRuneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestRuneScannerReadRuneCall) Return(r rune, size int, err error) *MockTestRuneScannerReadRuneCall {
	c.Call = c.Call.Return(r, size, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestRuneScannerReadRuneCall) Do(f func() (rune, int, error)) *MockTestRuneScannerReadRuneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestRuneScannerReadRuneCall) DoAndReturn(f func() (rune, int, error)) *MockTestRuneScannerReadRuneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnreadRune mocks base method.
func (m *MockTestRuneScanner) UnreadRune() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnreadRune")
	ret0, _ := ret[0].(error)
	return ret0
}

// UnreadRune indicates an expected call of UnreadRune.
func (mr *MockTestRuneScannerMockRecorder) UnreadRune() *MockTestRuneScannerUnreadRuneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnreadRune", reflect.TypeOf((*MockTestRuneScanner)(nil).UnreadRune))
	return &MockTestRuneScannerUnreadRuneCall{Call: call}
}

// MockTestRuneScannerUnreadRuneCall wrap *gomock.Call
type MockTestRuneScannerUnreadRuneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestRuneScannerUnreadRuneCall) Return(arg0 error) *MockTestRuneScannerUnreadRuneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestRuneScannerUnreadRuneCall) Do(f func() error) *MockTestRuneScannerUnreadRuneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestRuneScannerUnreadRuneCall) DoAndReturn(f func() error) *MockTestRuneScannerUnreadRuneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestSeeker is a mock of TestSeeker interface.
type MockTestSeeker struct {
	ctrl     *gomock.Controller
	recorder *MockTestSeekerMockRecorder
	isgomock struct{}
}

// MockTestSeekerMockRecorder is the mock recorder for MockTestSeeker.
type MockTestSeekerMockRecorder struct {
	mock *MockTestSeeker
}

// NewMockTestSeeker creates a new mock instance.
func NewMockTestSeeker(ctrl *gomock.Controller) *MockTestSeeker {
	mock := &MockTestSeeker{ctrl: ctrl}
	mock.recorder = &MockTestSeekerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestSeeker) EXPECT() *MockTestSeekerMockRecorder {
	return m.recorder
}

// Seek mocks base method.
func (m *MockTestSeeker) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockTestSeekerMockRecorder) Seek(offset, whence any) *MockTestSeekerSeekCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockTestSeeker)(nil).Seek), offset, whence)
	return &MockTestSeekerSeekCall{Call: call}
}

// MockTestSeekerSeekCall wrap *gomock.Call
type MockTestSeekerSeekCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestSeekerSeekCall) Return(arg0 int64, arg1 error) *MockTestSeekerSeekCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestSeekerSeekCall) Do(f func(int64, int) (int64, error)) *MockTestSeekerSeekCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestSeekerSeekCall) DoAndReturn(f func(int64, int) (int64, error)) *MockTestSeekerSeekCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestStringWriter is a mock of TestStringWriter interface.
type MockTestStringWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTestStringWriterMockRecorder
	isgomock struct{}
}

// MockTestStringWriterMockRecorder is the mock recorder for MockTestStringWriter.
type MockTestStringWriterMockRecorder struct {
	mock *MockTestStringWriter
}

// NewMockTestStringWriter creates a new mock instance.
func NewMockTestStringWriter(ctrl *gomock.Controller) *MockTestStringWriter {
	mock := &MockTestStringWriter{ctrl: ctrl}
	mock.recorder = &MockTestStringWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestStringWriter) EXPECT() *MockTestStringWriterMockRecorder {
	return m.recorder
}

// WriteString mocks base method.
func (m *MockTestStringWriter) WriteString(s string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteString", s)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteString indicates an expected call of WriteString.
func (mr *MockTestStringWriterMockRecorder) WriteString(s any) *MockTestStringWriterWriteStringCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteString", reflect.TypeOf((*MockTestStringWriter)(nil).WriteString), s)
	return &MockTestStringWriterWriteStringCall{Call: call}
}

// MockTestStringWriterWriteStringCall wrap *gomock.Call
type MockTestStringWriterWriteStringCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestStringWriterWriteStringCall) Return(n int, err error) *MockTestStringWriterWriteStringCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestStringWriterWriteStringCall) Do(f func(string) (int, error)) *MockTestStringWriterWriteStringCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestStringWriterWriteStringCall) DoAndReturn(f func(string) (int, error)) *MockTestStringWriterWriteStringCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestWriteCloser is a mock of TestWriteCloser interface.
type MockTestWriteCloser struct {
	ctrl     *gomock.Controller
	recorder *MockTestWriteCloserMockRecorder
	isgomock struct{}
}

// MockTestWriteCloserMockRecorder is the mock recorder for MockTestWriteCloser.
type MockTestWriteCloserMockRecorder struct {
	mock *MockTestWriteCloser
}

// NewMockTestWriteCloser creates a new mock instance.
func NewMockTestWriteCloser(ctrl *gomock.Controller) *MockTestWriteCloser {
	mock := &MockTestWriteCloser{ctrl: ctrl}
	mock.recorder = &MockTestWriteCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestWriteCloser) EXPECT() *MockTestWriteCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTestWriteCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTestWriteCloserMockRecorder) Close() *MockTestWriteCloserCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTestWriteCloser)(nil).Close))
	return &MockTestWriteCloserCloseCall{Call: call}
}

// MockTestWriteCloserCloseCall wrap *gomock.Call
type MockTestWriteCloserCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestWriteCloserCloseCall) Return(arg0 error) *MockTestWriteCloserCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestWriteCloserCloseCall) Do(f func() error) *MockTestWriteCloserCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestWriteCloserCloseCall) DoAndReturn(f func() error) *MockTestWriteCloserCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockTestWriteCloser) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockTestWriteCloserMockRecorder) Write(p any) *MockTestWriteCloserWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockTestWriteCloser)(nil).Write), p)
	return &MockTestWriteCloserWriteCall{Call: call}
}

// MockTestWriteCloserWriteCall wrap *gomock.Call
type MockTestWriteCloserWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestWriteCloserWriteCall) Return(n int, err error) *MockTestWriteCloserWriteCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestWriteCloserWriteCall) Do(f func([]byte) (int, error)) *MockTestWriteCloserWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestWriteCloserWriteCall) DoAndReturn(f func([]byte) (int, error)) *MockTestWriteCloserWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestWriteSeeker is a mock of TestWriteSeeker interface.
type MockTestWriteSeeker struct {
	ctrl     *gomock.Controller
	recorder *MockTestWriteSeekerMockRecorder
	isgomock struct{}
}

// MockTestWriteSeekerMockRecorder is the mock recorder for MockTestWriteSeeker.
type MockTestWriteSeekerMockRecorder struct {
	mock *MockTestWriteSeeker
}

// NewMockTestWriteSeeker creates a new mock instance.
func NewMockTestWriteSeeker(ctrl *gomock.Controller) *MockTestWriteSeeker {
	mock := &MockTestWriteSeeker{ctrl: ctrl}
	mock.recorder = &MockTestWriteSeekerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestWriteSeeker) EXPECT() *MockTestWriteSeekerMockRecorder {
	return m.recorder
}

// Seek mocks base method.
func (m *MockTestWriteSeeker) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockTestWriteSeekerMockRecorder) Seek(offset, whence any) *MockTestWriteSeekerSeekCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockTestWriteSeeker)(nil).Seek), offset, whence)
	return &MockTestWriteSeekerSeekCall{Call: call}
}

// MockTestWriteSeekerSeekCall wrap *gomock.Call
type MockTestWriteSeekerSeekCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestWriteSeekerSeekCall) Return(arg0 int64, arg1 error) *MockTestWriteSeekerSeekCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestWriteSeekerSeekCall) Do(f func(int64, int) (int64, error)) *MockTestWriteSeekerSeekCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestWriteSeekerSeekCall) DoAndReturn(f func(int64, int) (int64, error)) *MockTestWriteSeekerSeekCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockTestWriteSeeker) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockTestWriteSeekerMockRecorder) Write(p any) *MockTestWriteSeekerWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockTestWriteSeeker)(nil).Write), p)
	return &MockTestWriteSeekerWriteCall{Call: call}
}

// MockTestWriteSeekerWriteCall wrap *gomock.Call
type MockTestWriteSeekerWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestWriteSeekerWriteCall) Return(n int, err error) *MockTestWriteSeekerWriteCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestWriteSeekerWriteCall) Do(f func([]byte) (int, error)) *MockTestWriteSeekerWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestWriteSeekerWriteCall) DoAndReturn(f func([]byte) (int, error)) *MockTestWriteSeekerWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestWriter is a mock of TestWriter interface.
type MockTestWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTestWriterMockRecorder
	isgomock struct{}
}

// MockTestWriterMockRecorder is the mock recorder for MockTestWriter.
type MockTestWriterMockRecorder struct {
	mock *MockTestWriter
}

// NewMockTestWriter creates a new mock instance.
func NewMockTestWriter(ctrl *gomock.Controller) *MockTestWriter {
	mock := &MockTestWriter{ctrl: ctrl}
	mock.recorder = &MockTestWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestWriter) EXPECT() *MockTestWriterMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockTestWriter) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockTestWriterMockRecorder) Write(p any) *MockTestWriterWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockTestWriter)(nil).Write), p)
	return &MockTestWriterWriteCall{Call: call}
}

// MockTestWriterWriteCall wrap *gomock.Call
type MockTestWriterWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestWriterWriteCall) Return(n int, err error) *MockTestWriterWriteCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestWriterWriteCall) Do(f func([]byte) (int, error)) *MockTestWriterWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestWriterWriteCall) DoAndReturn(f func([]byte) (int, error)) *MockTestWriterWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestWriterAt is a mock of TestWriterAt interface.
type MockTestWriterAt struct {
	ctrl     *gomock.Controller
	recorder *MockTestWriterAtMockRecorder
	isgomock struct{}
}

// MockTestWriterAtMockRecorder is the mock recorder for MockTestWriterAt.
type MockTestWriterAtMockRecorder struct {
	mock *MockTestWriterAt
}

// NewMockTestWriterAt creates a new mock instance.
func NewMockTestWriterAt(ctrl *gomock.Controller) *MockTestWriterAt {
	mock := &MockTestWriterAt{ctrl: ctrl}
	mock.recorder = &MockTestWriterAtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestWriterAt) EXPECT() *MockTestWriterAtMockRecorder {
	return m.recorder
}

// WriteAt mocks base method.
func (m *MockTestWriterAt) WriteAt(p []byte, off int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAt", p, off)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAt indicates an expected call of WriteAt.
func (mr *MockTestWriterAtMockRecorder) WriteAt(p, off any) *MockTestWriterAtWriteAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAt", reflect.TypeOf((*MockTestWriterAt)(nil).WriteAt), p, off)
	return &MockTestWriterAtWriteAtCall{Call: call}
}

// MockTestWriterAtWriteAtCall wrap *gomock.Call
type MockTestWriterAtWriteAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestWriterAtWriteAtCall) Return(n int, err error) *MockTestWriterAtWriteAtCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestWriterAtWriteAtCall) Do(f func([]byte, int64) (int, error)) *MockTestWriterAtWriteAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestWriterAtWriteAtCall) DoAndReturn(f func([]byte, int64) (int, error)) *MockTestWriterAtWriteAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestWriterTo is a mock of TestWriterTo interface.
type MockTestWriterTo struct {
	ctrl     *gomock.Controller
	recorder *MockTestWriterToMockRecorder
	isgomock struct{}
}

// MockTestWriterToMockRecorder is the mock recorder for MockTestWriterTo.
type MockTestWriterToMockRecorder struct {
	mock *MockTestWriterTo
}

// NewMockTestWriterTo creates a new mock instance.
func NewMockTestWriterTo(ctrl *gomock.Controller) *MockTestWriterTo {
	mock := &MockTestWriterTo{ctrl: ctrl}
	mock.recorder = &MockTestWriterToMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestWriterTo) EXPECT() *MockTestWriterToMockRecorder {
	return m.recorder
}

// WriteTo mocks base method.
func (m *MockTestWriterTo) WriteTo(w io.Writer) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTo", w)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteTo indicates an expected call of WriteTo.
func (mr *MockTestWriterToMockRecorder) WriteTo(w any) *MockTestWriterToWriteToCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTo", reflect.TypeOf((*MockTestWriterTo)(nil).WriteTo), w)
	return &MockTestWriterToWriteToCall{Call: call}
}

// MockTestWriterToWriteToCall wrap *gomock.Call
type MockTestWriterToWriteToCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestWriterToWriteToCall) Return(n int64, err error) *MockTestWriterToWriteToCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestWriterToWriteToCall) Do(f func(io.Writer) (int64, error)) *MockTestWriterToWriteToCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestWriterToWriteToCall) DoAndReturn(f func(io.Writer) (int64, error)) *MockTestWriterToWriteToCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
