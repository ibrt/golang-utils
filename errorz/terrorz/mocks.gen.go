// Code generated by MockGen. DO NOT EDIT.
// Source: ./fixtures.go
//
// Generated by this command:
//
//	mockgen -typed -source ./fixtures.go -destination ./mocks.gen.go -package terrorz
//

// Package terrorz is a generated GoMock package.
package terrorz

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTestDetailedError is a mock of TestDetailedError interface.
type MockTestDetailedError struct {
	ctrl     *gomock.Controller
	recorder *MockTestDetailedErrorMockRecorder
	isgomock struct{}
}

// MockTestDetailedErrorMockRecorder is the mock recorder for MockTestDetailedError.
type MockTestDetailedErrorMockRecorder struct {
	mock *MockTestDetailedError
}

// NewMockTestDetailedError creates a new mock instance.
func NewMockTestDetailedError(ctrl *gomock.Controller) *MockTestDetailedError {
	mock := &MockTestDetailedError{ctrl: ctrl}
	mock.recorder = &MockTestDetailedErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestDetailedError) EXPECT() *MockTestDetailedErrorMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockTestDetailedError) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockTestDetailedErrorMockRecorder) Error() *MockTestDetailedErrorErrorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockTestDetailedError)(nil).Error))
	return &MockTestDetailedErrorErrorCall{Call: call}
}

// MockTestDetailedErrorErrorCall wrap *gomock.Call
type MockTestDetailedErrorErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedErrorErrorCall) Return(arg0 string) *MockTestDetailedErrorErrorCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedErrorErrorCall) Do(f func() string) *MockTestDetailedErrorErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedErrorErrorCall) DoAndReturn(f func() string) *MockTestDetailedErrorErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetErrorDetails mocks base method.
func (m *MockTestDetailedError) GetErrorDetails() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorDetails")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// GetErrorDetails indicates an expected call of GetErrorDetails.
func (mr *MockTestDetailedErrorMockRecorder) GetErrorDetails() *MockTestDetailedErrorGetErrorDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorDetails", reflect.TypeOf((*MockTestDetailedError)(nil).GetErrorDetails))
	return &MockTestDetailedErrorGetErrorDetailsCall{Call: call}
}

// MockTestDetailedErrorGetErrorDetailsCall wrap *gomock.Call
type MockTestDetailedErrorGetErrorDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedErrorGetErrorDetailsCall) Return(arg0 map[string]any) *MockTestDetailedErrorGetErrorDetailsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedErrorGetErrorDetailsCall) Do(f func() map[string]any) *MockTestDetailedErrorGetErrorDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedErrorGetErrorDetailsCall) DoAndReturn(f func() map[string]any) *MockTestDetailedErrorGetErrorDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetErrorHTTPStatus mocks base method.
func (m *MockTestDetailedError) GetErrorHTTPStatus() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorHTTPStatus")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetErrorHTTPStatus indicates an expected call of GetErrorHTTPStatus.
func (mr *MockTestDetailedErrorMockRecorder) GetErrorHTTPStatus() *MockTestDetailedErrorGetErrorHTTPStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorHTTPStatus", reflect.TypeOf((*MockTestDetailedError)(nil).GetErrorHTTPStatus))
	return &MockTestDetailedErrorGetErrorHTTPStatusCall{Call: call}
}

// MockTestDetailedErrorGetErrorHTTPStatusCall wrap *gomock.Call
type MockTestDetailedErrorGetErrorHTTPStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedErrorGetErrorHTTPStatusCall) Return(arg0 int) *MockTestDetailedErrorGetErrorHTTPStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedErrorGetErrorHTTPStatusCall) Do(f func() int) *MockTestDetailedErrorGetErrorHTTPStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedErrorGetErrorHTTPStatusCall) DoAndReturn(f func() int) *MockTestDetailedErrorGetErrorHTTPStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetErrorName mocks base method.
func (m *MockTestDetailedError) GetErrorName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetErrorName indicates an expected call of GetErrorName.
func (mr *MockTestDetailedErrorMockRecorder) GetErrorName() *MockTestDetailedErrorGetErrorNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorName", reflect.TypeOf((*MockTestDetailedError)(nil).GetErrorName))
	return &MockTestDetailedErrorGetErrorNameCall{Call: call}
}

// MockTestDetailedErrorGetErrorNameCall wrap *gomock.Call
type MockTestDetailedErrorGetErrorNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedErrorGetErrorNameCall) Return(arg0 string) *MockTestDetailedErrorGetErrorNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedErrorGetErrorNameCall) Do(f func() string) *MockTestDetailedErrorGetErrorNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedErrorGetErrorNameCall) DoAndReturn(f func() string) *MockTestDetailedErrorGetErrorNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestDetailedErrorUnwrapSingle is a mock of TestDetailedErrorUnwrapSingle interface.
type MockTestDetailedErrorUnwrapSingle struct {
	ctrl     *gomock.Controller
	recorder *MockTestDetailedErrorUnwrapSingleMockRecorder
	isgomock struct{}
}

// MockTestDetailedErrorUnwrapSingleMockRecorder is the mock recorder for MockTestDetailedErrorUnwrapSingle.
type MockTestDetailedErrorUnwrapSingleMockRecorder struct {
	mock *MockTestDetailedErrorUnwrapSingle
}

// NewMockTestDetailedErrorUnwrapSingle creates a new mock instance.
func NewMockTestDetailedErrorUnwrapSingle(ctrl *gomock.Controller) *MockTestDetailedErrorUnwrapSingle {
	mock := &MockTestDetailedErrorUnwrapSingle{ctrl: ctrl}
	mock.recorder = &MockTestDetailedErrorUnwrapSingleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestDetailedErrorUnwrapSingle) EXPECT() *MockTestDetailedErrorUnwrapSingleMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockTestDetailedErrorUnwrapSingle) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockTestDetailedErrorUnwrapSingleMockRecorder) Error() *MockTestDetailedErrorUnwrapSingleErrorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockTestDetailedErrorUnwrapSingle)(nil).Error))
	return &MockTestDetailedErrorUnwrapSingleErrorCall{Call: call}
}

// MockTestDetailedErrorUnwrapSingleErrorCall wrap *gomock.Call
type MockTestDetailedErrorUnwrapSingleErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedErrorUnwrapSingleErrorCall) Return(arg0 string) *MockTestDetailedErrorUnwrapSingleErrorCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedErrorUnwrapSingleErrorCall) Do(f func() string) *MockTestDetailedErrorUnwrapSingleErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedErrorUnwrapSingleErrorCall) DoAndReturn(f func() string) *MockTestDetailedErrorUnwrapSingleErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetErrorDetails mocks base method.
func (m *MockTestDetailedErrorUnwrapSingle) GetErrorDetails() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorDetails")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// GetErrorDetails indicates an expected call of GetErrorDetails.
func (mr *MockTestDetailedErrorUnwrapSingleMockRecorder) GetErrorDetails() *MockTestDetailedErrorUnwrapSingleGetErrorDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorDetails", reflect.TypeOf((*MockTestDetailedErrorUnwrapSingle)(nil).GetErrorDetails))
	return &MockTestDetailedErrorUnwrapSingleGetErrorDetailsCall{Call: call}
}

// MockTestDetailedErrorUnwrapSingleGetErrorDetailsCall wrap *gomock.Call
type MockTestDetailedErrorUnwrapSingleGetErrorDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedErrorUnwrapSingleGetErrorDetailsCall) Return(arg0 map[string]any) *MockTestDetailedErrorUnwrapSingleGetErrorDetailsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedErrorUnwrapSingleGetErrorDetailsCall) Do(f func() map[string]any) *MockTestDetailedErrorUnwrapSingleGetErrorDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedErrorUnwrapSingleGetErrorDetailsCall) DoAndReturn(f func() map[string]any) *MockTestDetailedErrorUnwrapSingleGetErrorDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetErrorHTTPStatus mocks base method.
func (m *MockTestDetailedErrorUnwrapSingle) GetErrorHTTPStatus() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorHTTPStatus")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetErrorHTTPStatus indicates an expected call of GetErrorHTTPStatus.
func (mr *MockTestDetailedErrorUnwrapSingleMockRecorder) GetErrorHTTPStatus() *MockTestDetailedErrorUnwrapSingleGetErrorHTTPStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorHTTPStatus", reflect.TypeOf((*MockTestDetailedErrorUnwrapSingle)(nil).GetErrorHTTPStatus))
	return &MockTestDetailedErrorUnwrapSingleGetErrorHTTPStatusCall{Call: call}
}

// MockTestDetailedErrorUnwrapSingleGetErrorHTTPStatusCall wrap *gomock.Call
type MockTestDetailedErrorUnwrapSingleGetErrorHTTPStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedErrorUnwrapSingleGetErrorHTTPStatusCall) Return(arg0 int) *MockTestDetailedErrorUnwrapSingleGetErrorHTTPStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedErrorUnwrapSingleGetErrorHTTPStatusCall) Do(f func() int) *MockTestDetailedErrorUnwrapSingleGetErrorHTTPStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedErrorUnwrapSingleGetErrorHTTPStatusCall) DoAndReturn(f func() int) *MockTestDetailedErrorUnwrapSingleGetErrorHTTPStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetErrorName mocks base method.
func (m *MockTestDetailedErrorUnwrapSingle) GetErrorName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetErrorName indicates an expected call of GetErrorName.
func (mr *MockTestDetailedErrorUnwrapSingleMockRecorder) GetErrorName() *MockTestDetailedErrorUnwrapSingleGetErrorNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorName", reflect.TypeOf((*MockTestDetailedErrorUnwrapSingle)(nil).GetErrorName))
	return &MockTestDetailedErrorUnwrapSingleGetErrorNameCall{Call: call}
}

// MockTestDetailedErrorUnwrapSingleGetErrorNameCall wrap *gomock.Call
type MockTestDetailedErrorUnwrapSingleGetErrorNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedErrorUnwrapSingleGetErrorNameCall) Return(arg0 string) *MockTestDetailedErrorUnwrapSingleGetErrorNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedErrorUnwrapSingleGetErrorNameCall) Do(f func() string) *MockTestDetailedErrorUnwrapSingleGetErrorNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedErrorUnwrapSingleGetErrorNameCall) DoAndReturn(f func() string) *MockTestDetailedErrorUnwrapSingleGetErrorNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unwrap mocks base method.
func (m *MockTestDetailedErrorUnwrapSingle) Unwrap() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unwrap")
	ret0, _ := ret[0].(error)
	return ret0
}

// Unwrap indicates an expected call of Unwrap.
func (mr *MockTestDetailedErrorUnwrapSingleMockRecorder) Unwrap() *MockTestDetailedErrorUnwrapSingleUnwrapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unwrap", reflect.TypeOf((*MockTestDetailedErrorUnwrapSingle)(nil).Unwrap))
	return &MockTestDetailedErrorUnwrapSingleUnwrapCall{Call: call}
}

// MockTestDetailedErrorUnwrapSingleUnwrapCall wrap *gomock.Call
type MockTestDetailedErrorUnwrapSingleUnwrapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedErrorUnwrapSingleUnwrapCall) Return(arg0 error) *MockTestDetailedErrorUnwrapSingleUnwrapCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedErrorUnwrapSingleUnwrapCall) Do(f func() error) *MockTestDetailedErrorUnwrapSingleUnwrapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedErrorUnwrapSingleUnwrapCall) DoAndReturn(f func() error) *MockTestDetailedErrorUnwrapSingleUnwrapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestDetailedErrorUnwrapMulti is a mock of TestDetailedErrorUnwrapMulti interface.
type MockTestDetailedErrorUnwrapMulti struct {
	ctrl     *gomock.Controller
	recorder *MockTestDetailedErrorUnwrapMultiMockRecorder
	isgomock struct{}
}

// MockTestDetailedErrorUnwrapMultiMockRecorder is the mock recorder for MockTestDetailedErrorUnwrapMulti.
type MockTestDetailedErrorUnwrapMultiMockRecorder struct {
	mock *MockTestDetailedErrorUnwrapMulti
}

// NewMockTestDetailedErrorUnwrapMulti creates a new mock instance.
func NewMockTestDetailedErrorUnwrapMulti(ctrl *gomock.Controller) *MockTestDetailedErrorUnwrapMulti {
	mock := &MockTestDetailedErrorUnwrapMulti{ctrl: ctrl}
	mock.recorder = &MockTestDetailedErrorUnwrapMultiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestDetailedErrorUnwrapMulti) EXPECT() *MockTestDetailedErrorUnwrapMultiMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockTestDetailedErrorUnwrapMulti) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockTestDetailedErrorUnwrapMultiMockRecorder) Error() *MockTestDetailedErrorUnwrapMultiErrorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockTestDetailedErrorUnwrapMulti)(nil).Error))
	return &MockTestDetailedErrorUnwrapMultiErrorCall{Call: call}
}

// MockTestDetailedErrorUnwrapMultiErrorCall wrap *gomock.Call
type MockTestDetailedErrorUnwrapMultiErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedErrorUnwrapMultiErrorCall) Return(arg0 string) *MockTestDetailedErrorUnwrapMultiErrorCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedErrorUnwrapMultiErrorCall) Do(f func() string) *MockTestDetailedErrorUnwrapMultiErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedErrorUnwrapMultiErrorCall) DoAndReturn(f func() string) *MockTestDetailedErrorUnwrapMultiErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetErrorDetails mocks base method.
func (m *MockTestDetailedErrorUnwrapMulti) GetErrorDetails() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorDetails")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// GetErrorDetails indicates an expected call of GetErrorDetails.
func (mr *MockTestDetailedErrorUnwrapMultiMockRecorder) GetErrorDetails() *MockTestDetailedErrorUnwrapMultiGetErrorDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorDetails", reflect.TypeOf((*MockTestDetailedErrorUnwrapMulti)(nil).GetErrorDetails))
	return &MockTestDetailedErrorUnwrapMultiGetErrorDetailsCall{Call: call}
}

// MockTestDetailedErrorUnwrapMultiGetErrorDetailsCall wrap *gomock.Call
type MockTestDetailedErrorUnwrapMultiGetErrorDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedErrorUnwrapMultiGetErrorDetailsCall) Return(arg0 map[string]any) *MockTestDetailedErrorUnwrapMultiGetErrorDetailsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedErrorUnwrapMultiGetErrorDetailsCall) Do(f func() map[string]any) *MockTestDetailedErrorUnwrapMultiGetErrorDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedErrorUnwrapMultiGetErrorDetailsCall) DoAndReturn(f func() map[string]any) *MockTestDetailedErrorUnwrapMultiGetErrorDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetErrorHTTPStatus mocks base method.
func (m *MockTestDetailedErrorUnwrapMulti) GetErrorHTTPStatus() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorHTTPStatus")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetErrorHTTPStatus indicates an expected call of GetErrorHTTPStatus.
func (mr *MockTestDetailedErrorUnwrapMultiMockRecorder) GetErrorHTTPStatus() *MockTestDetailedErrorUnwrapMultiGetErrorHTTPStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorHTTPStatus", reflect.TypeOf((*MockTestDetailedErrorUnwrapMulti)(nil).GetErrorHTTPStatus))
	return &MockTestDetailedErrorUnwrapMultiGetErrorHTTPStatusCall{Call: call}
}

// MockTestDetailedErrorUnwrapMultiGetErrorHTTPStatusCall wrap *gomock.Call
type MockTestDetailedErrorUnwrapMultiGetErrorHTTPStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedErrorUnwrapMultiGetErrorHTTPStatusCall) Return(arg0 int) *MockTestDetailedErrorUnwrapMultiGetErrorHTTPStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedErrorUnwrapMultiGetErrorHTTPStatusCall) Do(f func() int) *MockTestDetailedErrorUnwrapMultiGetErrorHTTPStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedErrorUnwrapMultiGetErrorHTTPStatusCall) DoAndReturn(f func() int) *MockTestDetailedErrorUnwrapMultiGetErrorHTTPStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetErrorName mocks base method.
func (m *MockTestDetailedErrorUnwrapMulti) GetErrorName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetErrorName indicates an expected call of GetErrorName.
func (mr *MockTestDetailedErrorUnwrapMultiMockRecorder) GetErrorName() *MockTestDetailedErrorUnwrapMultiGetErrorNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorName", reflect.TypeOf((*MockTestDetailedErrorUnwrapMulti)(nil).GetErrorName))
	return &MockTestDetailedErrorUnwrapMultiGetErrorNameCall{Call: call}
}

// MockTestDetailedErrorUnwrapMultiGetErrorNameCall wrap *gomock.Call
type MockTestDetailedErrorUnwrapMultiGetErrorNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedErrorUnwrapMultiGetErrorNameCall) Return(arg0 string) *MockTestDetailedErrorUnwrapMultiGetErrorNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedErrorUnwrapMultiGetErrorNameCall) Do(f func() string) *MockTestDetailedErrorUnwrapMultiGetErrorNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedErrorUnwrapMultiGetErrorNameCall) DoAndReturn(f func() string) *MockTestDetailedErrorUnwrapMultiGetErrorNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unwrap mocks base method.
func (m *MockTestDetailedErrorUnwrapMulti) Unwrap() []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unwrap")
	ret0, _ := ret[0].([]error)
	return ret0
}

// Unwrap indicates an expected call of Unwrap.
func (mr *MockTestDetailedErrorUnwrapMultiMockRecorder) Unwrap() *MockTestDetailedErrorUnwrapMultiUnwrapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unwrap", reflect.TypeOf((*MockTestDetailedErrorUnwrapMulti)(nil).Unwrap))
	return &MockTestDetailedErrorUnwrapMultiUnwrapCall{Call: call}
}

// MockTestDetailedErrorUnwrapMultiUnwrapCall wrap *gomock.Call
type MockTestDetailedErrorUnwrapMultiUnwrapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedErrorUnwrapMultiUnwrapCall) Return(arg0 []error) *MockTestDetailedErrorUnwrapMultiUnwrapCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedErrorUnwrapMultiUnwrapCall) Do(f func() []error) *MockTestDetailedErrorUnwrapMultiUnwrapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedErrorUnwrapMultiUnwrapCall) DoAndReturn(f func() []error) *MockTestDetailedErrorUnwrapMultiUnwrapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
