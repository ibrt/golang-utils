// Code generated by MockGen. DO NOT EDIT.
// Source: ./fixtures.go
//
// Generated by this command:
//
//	mockgen -typed -source ./fixtures.go -destination ./mocks.gen.go -package terrorz
//

// Package terrorz is a generated GoMock package.
package terrorz

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTestDetailedError is a mock of TestDetailedError interface.
type MockTestDetailedError struct {
	ctrl     *gomock.Controller
	recorder *MockTestDetailedErrorMockRecorder
	isgomock struct{}
}

// MockTestDetailedErrorMockRecorder is the mock recorder for MockTestDetailedError.
type MockTestDetailedErrorMockRecorder struct {
	mock *MockTestDetailedError
}

// NewMockTestDetailedError creates a new mock instance.
func NewMockTestDetailedError(ctrl *gomock.Controller) *MockTestDetailedError {
	mock := &MockTestDetailedError{ctrl: ctrl}
	mock.recorder = &MockTestDetailedErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestDetailedError) EXPECT() *MockTestDetailedErrorMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockTestDetailedError) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockTestDetailedErrorMockRecorder) Error() *MockTestDetailedErrorErrorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockTestDetailedError)(nil).Error))
	return &MockTestDetailedErrorErrorCall{Call: call}
}

// MockTestDetailedErrorErrorCall wrap *gomock.Call
type MockTestDetailedErrorErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedErrorErrorCall) Return(arg0 string) *MockTestDetailedErrorErrorCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedErrorErrorCall) Do(f func() string) *MockTestDetailedErrorErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedErrorErrorCall) DoAndReturn(f func() string) *MockTestDetailedErrorErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetErrorDetails mocks base method.
func (m *MockTestDetailedError) GetErrorDetails() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorDetails")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// GetErrorDetails indicates an expected call of GetErrorDetails.
func (mr *MockTestDetailedErrorMockRecorder) GetErrorDetails() *MockTestDetailedErrorGetErrorDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorDetails", reflect.TypeOf((*MockTestDetailedError)(nil).GetErrorDetails))
	return &MockTestDetailedErrorGetErrorDetailsCall{Call: call}
}

// MockTestDetailedErrorGetErrorDetailsCall wrap *gomock.Call
type MockTestDetailedErrorGetErrorDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedErrorGetErrorDetailsCall) Return(arg0 map[string]any) *MockTestDetailedErrorGetErrorDetailsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedErrorGetErrorDetailsCall) Do(f func() map[string]any) *MockTestDetailedErrorGetErrorDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedErrorGetErrorDetailsCall) DoAndReturn(f func() map[string]any) *MockTestDetailedErrorGetErrorDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetErrorHTTPStatus mocks base method.
func (m *MockTestDetailedError) GetErrorHTTPStatus() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorHTTPStatus")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetErrorHTTPStatus indicates an expected call of GetErrorHTTPStatus.
func (mr *MockTestDetailedErrorMockRecorder) GetErrorHTTPStatus() *MockTestDetailedErrorGetErrorHTTPStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorHTTPStatus", reflect.TypeOf((*MockTestDetailedError)(nil).GetErrorHTTPStatus))
	return &MockTestDetailedErrorGetErrorHTTPStatusCall{Call: call}
}

// MockTestDetailedErrorGetErrorHTTPStatusCall wrap *gomock.Call
type MockTestDetailedErrorGetErrorHTTPStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedErrorGetErrorHTTPStatusCall) Return(arg0 int) *MockTestDetailedErrorGetErrorHTTPStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedErrorGetErrorHTTPStatusCall) Do(f func() int) *MockTestDetailedErrorGetErrorHTTPStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedErrorGetErrorHTTPStatusCall) DoAndReturn(f func() int) *MockTestDetailedErrorGetErrorHTTPStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetErrorName mocks base method.
func (m *MockTestDetailedError) GetErrorName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetErrorName indicates an expected call of GetErrorName.
func (mr *MockTestDetailedErrorMockRecorder) GetErrorName() *MockTestDetailedErrorGetErrorNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorName", reflect.TypeOf((*MockTestDetailedError)(nil).GetErrorName))
	return &MockTestDetailedErrorGetErrorNameCall{Call: call}
}

// MockTestDetailedErrorGetErrorNameCall wrap *gomock.Call
type MockTestDetailedErrorGetErrorNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedErrorGetErrorNameCall) Return(arg0 string) *MockTestDetailedErrorGetErrorNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedErrorGetErrorNameCall) Do(f func() string) *MockTestDetailedErrorGetErrorNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedErrorGetErrorNameCall) DoAndReturn(f func() string) *MockTestDetailedErrorGetErrorNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestDetailedUnwrapSingleError is a mock of TestDetailedUnwrapSingleError interface.
type MockTestDetailedUnwrapSingleError struct {
	ctrl     *gomock.Controller
	recorder *MockTestDetailedUnwrapSingleErrorMockRecorder
	isgomock struct{}
}

// MockTestDetailedUnwrapSingleErrorMockRecorder is the mock recorder for MockTestDetailedUnwrapSingleError.
type MockTestDetailedUnwrapSingleErrorMockRecorder struct {
	mock *MockTestDetailedUnwrapSingleError
}

// NewMockTestDetailedUnwrapSingleError creates a new mock instance.
func NewMockTestDetailedUnwrapSingleError(ctrl *gomock.Controller) *MockTestDetailedUnwrapSingleError {
	mock := &MockTestDetailedUnwrapSingleError{ctrl: ctrl}
	mock.recorder = &MockTestDetailedUnwrapSingleErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestDetailedUnwrapSingleError) EXPECT() *MockTestDetailedUnwrapSingleErrorMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockTestDetailedUnwrapSingleError) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockTestDetailedUnwrapSingleErrorMockRecorder) Error() *MockTestDetailedUnwrapSingleErrorErrorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockTestDetailedUnwrapSingleError)(nil).Error))
	return &MockTestDetailedUnwrapSingleErrorErrorCall{Call: call}
}

// MockTestDetailedUnwrapSingleErrorErrorCall wrap *gomock.Call
type MockTestDetailedUnwrapSingleErrorErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedUnwrapSingleErrorErrorCall) Return(arg0 string) *MockTestDetailedUnwrapSingleErrorErrorCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedUnwrapSingleErrorErrorCall) Do(f func() string) *MockTestDetailedUnwrapSingleErrorErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedUnwrapSingleErrorErrorCall) DoAndReturn(f func() string) *MockTestDetailedUnwrapSingleErrorErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetErrorDetails mocks base method.
func (m *MockTestDetailedUnwrapSingleError) GetErrorDetails() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorDetails")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// GetErrorDetails indicates an expected call of GetErrorDetails.
func (mr *MockTestDetailedUnwrapSingleErrorMockRecorder) GetErrorDetails() *MockTestDetailedUnwrapSingleErrorGetErrorDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorDetails", reflect.TypeOf((*MockTestDetailedUnwrapSingleError)(nil).GetErrorDetails))
	return &MockTestDetailedUnwrapSingleErrorGetErrorDetailsCall{Call: call}
}

// MockTestDetailedUnwrapSingleErrorGetErrorDetailsCall wrap *gomock.Call
type MockTestDetailedUnwrapSingleErrorGetErrorDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedUnwrapSingleErrorGetErrorDetailsCall) Return(arg0 map[string]any) *MockTestDetailedUnwrapSingleErrorGetErrorDetailsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedUnwrapSingleErrorGetErrorDetailsCall) Do(f func() map[string]any) *MockTestDetailedUnwrapSingleErrorGetErrorDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedUnwrapSingleErrorGetErrorDetailsCall) DoAndReturn(f func() map[string]any) *MockTestDetailedUnwrapSingleErrorGetErrorDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetErrorHTTPStatus mocks base method.
func (m *MockTestDetailedUnwrapSingleError) GetErrorHTTPStatus() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorHTTPStatus")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetErrorHTTPStatus indicates an expected call of GetErrorHTTPStatus.
func (mr *MockTestDetailedUnwrapSingleErrorMockRecorder) GetErrorHTTPStatus() *MockTestDetailedUnwrapSingleErrorGetErrorHTTPStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorHTTPStatus", reflect.TypeOf((*MockTestDetailedUnwrapSingleError)(nil).GetErrorHTTPStatus))
	return &MockTestDetailedUnwrapSingleErrorGetErrorHTTPStatusCall{Call: call}
}

// MockTestDetailedUnwrapSingleErrorGetErrorHTTPStatusCall wrap *gomock.Call
type MockTestDetailedUnwrapSingleErrorGetErrorHTTPStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedUnwrapSingleErrorGetErrorHTTPStatusCall) Return(arg0 int) *MockTestDetailedUnwrapSingleErrorGetErrorHTTPStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedUnwrapSingleErrorGetErrorHTTPStatusCall) Do(f func() int) *MockTestDetailedUnwrapSingleErrorGetErrorHTTPStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedUnwrapSingleErrorGetErrorHTTPStatusCall) DoAndReturn(f func() int) *MockTestDetailedUnwrapSingleErrorGetErrorHTTPStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetErrorName mocks base method.
func (m *MockTestDetailedUnwrapSingleError) GetErrorName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetErrorName indicates an expected call of GetErrorName.
func (mr *MockTestDetailedUnwrapSingleErrorMockRecorder) GetErrorName() *MockTestDetailedUnwrapSingleErrorGetErrorNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorName", reflect.TypeOf((*MockTestDetailedUnwrapSingleError)(nil).GetErrorName))
	return &MockTestDetailedUnwrapSingleErrorGetErrorNameCall{Call: call}
}

// MockTestDetailedUnwrapSingleErrorGetErrorNameCall wrap *gomock.Call
type MockTestDetailedUnwrapSingleErrorGetErrorNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedUnwrapSingleErrorGetErrorNameCall) Return(arg0 string) *MockTestDetailedUnwrapSingleErrorGetErrorNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedUnwrapSingleErrorGetErrorNameCall) Do(f func() string) *MockTestDetailedUnwrapSingleErrorGetErrorNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedUnwrapSingleErrorGetErrorNameCall) DoAndReturn(f func() string) *MockTestDetailedUnwrapSingleErrorGetErrorNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unwrap mocks base method.
func (m *MockTestDetailedUnwrapSingleError) Unwrap() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unwrap")
	ret0, _ := ret[0].(error)
	return ret0
}

// Unwrap indicates an expected call of Unwrap.
func (mr *MockTestDetailedUnwrapSingleErrorMockRecorder) Unwrap() *MockTestDetailedUnwrapSingleErrorUnwrapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unwrap", reflect.TypeOf((*MockTestDetailedUnwrapSingleError)(nil).Unwrap))
	return &MockTestDetailedUnwrapSingleErrorUnwrapCall{Call: call}
}

// MockTestDetailedUnwrapSingleErrorUnwrapCall wrap *gomock.Call
type MockTestDetailedUnwrapSingleErrorUnwrapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedUnwrapSingleErrorUnwrapCall) Return(arg0 error) *MockTestDetailedUnwrapSingleErrorUnwrapCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedUnwrapSingleErrorUnwrapCall) Do(f func() error) *MockTestDetailedUnwrapSingleErrorUnwrapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedUnwrapSingleErrorUnwrapCall) DoAndReturn(f func() error) *MockTestDetailedUnwrapSingleErrorUnwrapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestDetailedUnwrapMultiError is a mock of TestDetailedUnwrapMultiError interface.
type MockTestDetailedUnwrapMultiError struct {
	ctrl     *gomock.Controller
	recorder *MockTestDetailedUnwrapMultiErrorMockRecorder
	isgomock struct{}
}

// MockTestDetailedUnwrapMultiErrorMockRecorder is the mock recorder for MockTestDetailedUnwrapMultiError.
type MockTestDetailedUnwrapMultiErrorMockRecorder struct {
	mock *MockTestDetailedUnwrapMultiError
}

// NewMockTestDetailedUnwrapMultiError creates a new mock instance.
func NewMockTestDetailedUnwrapMultiError(ctrl *gomock.Controller) *MockTestDetailedUnwrapMultiError {
	mock := &MockTestDetailedUnwrapMultiError{ctrl: ctrl}
	mock.recorder = &MockTestDetailedUnwrapMultiErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestDetailedUnwrapMultiError) EXPECT() *MockTestDetailedUnwrapMultiErrorMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockTestDetailedUnwrapMultiError) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockTestDetailedUnwrapMultiErrorMockRecorder) Error() *MockTestDetailedUnwrapMultiErrorErrorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockTestDetailedUnwrapMultiError)(nil).Error))
	return &MockTestDetailedUnwrapMultiErrorErrorCall{Call: call}
}

// MockTestDetailedUnwrapMultiErrorErrorCall wrap *gomock.Call
type MockTestDetailedUnwrapMultiErrorErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedUnwrapMultiErrorErrorCall) Return(arg0 string) *MockTestDetailedUnwrapMultiErrorErrorCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedUnwrapMultiErrorErrorCall) Do(f func() string) *MockTestDetailedUnwrapMultiErrorErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedUnwrapMultiErrorErrorCall) DoAndReturn(f func() string) *MockTestDetailedUnwrapMultiErrorErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetErrorDetails mocks base method.
func (m *MockTestDetailedUnwrapMultiError) GetErrorDetails() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorDetails")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// GetErrorDetails indicates an expected call of GetErrorDetails.
func (mr *MockTestDetailedUnwrapMultiErrorMockRecorder) GetErrorDetails() *MockTestDetailedUnwrapMultiErrorGetErrorDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorDetails", reflect.TypeOf((*MockTestDetailedUnwrapMultiError)(nil).GetErrorDetails))
	return &MockTestDetailedUnwrapMultiErrorGetErrorDetailsCall{Call: call}
}

// MockTestDetailedUnwrapMultiErrorGetErrorDetailsCall wrap *gomock.Call
type MockTestDetailedUnwrapMultiErrorGetErrorDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedUnwrapMultiErrorGetErrorDetailsCall) Return(arg0 map[string]any) *MockTestDetailedUnwrapMultiErrorGetErrorDetailsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedUnwrapMultiErrorGetErrorDetailsCall) Do(f func() map[string]any) *MockTestDetailedUnwrapMultiErrorGetErrorDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedUnwrapMultiErrorGetErrorDetailsCall) DoAndReturn(f func() map[string]any) *MockTestDetailedUnwrapMultiErrorGetErrorDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetErrorHTTPStatus mocks base method.
func (m *MockTestDetailedUnwrapMultiError) GetErrorHTTPStatus() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorHTTPStatus")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetErrorHTTPStatus indicates an expected call of GetErrorHTTPStatus.
func (mr *MockTestDetailedUnwrapMultiErrorMockRecorder) GetErrorHTTPStatus() *MockTestDetailedUnwrapMultiErrorGetErrorHTTPStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorHTTPStatus", reflect.TypeOf((*MockTestDetailedUnwrapMultiError)(nil).GetErrorHTTPStatus))
	return &MockTestDetailedUnwrapMultiErrorGetErrorHTTPStatusCall{Call: call}
}

// MockTestDetailedUnwrapMultiErrorGetErrorHTTPStatusCall wrap *gomock.Call
type MockTestDetailedUnwrapMultiErrorGetErrorHTTPStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedUnwrapMultiErrorGetErrorHTTPStatusCall) Return(arg0 int) *MockTestDetailedUnwrapMultiErrorGetErrorHTTPStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedUnwrapMultiErrorGetErrorHTTPStatusCall) Do(f func() int) *MockTestDetailedUnwrapMultiErrorGetErrorHTTPStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedUnwrapMultiErrorGetErrorHTTPStatusCall) DoAndReturn(f func() int) *MockTestDetailedUnwrapMultiErrorGetErrorHTTPStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetErrorName mocks base method.
func (m *MockTestDetailedUnwrapMultiError) GetErrorName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetErrorName indicates an expected call of GetErrorName.
func (mr *MockTestDetailedUnwrapMultiErrorMockRecorder) GetErrorName() *MockTestDetailedUnwrapMultiErrorGetErrorNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorName", reflect.TypeOf((*MockTestDetailedUnwrapMultiError)(nil).GetErrorName))
	return &MockTestDetailedUnwrapMultiErrorGetErrorNameCall{Call: call}
}

// MockTestDetailedUnwrapMultiErrorGetErrorNameCall wrap *gomock.Call
type MockTestDetailedUnwrapMultiErrorGetErrorNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedUnwrapMultiErrorGetErrorNameCall) Return(arg0 string) *MockTestDetailedUnwrapMultiErrorGetErrorNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedUnwrapMultiErrorGetErrorNameCall) Do(f func() string) *MockTestDetailedUnwrapMultiErrorGetErrorNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedUnwrapMultiErrorGetErrorNameCall) DoAndReturn(f func() string) *MockTestDetailedUnwrapMultiErrorGetErrorNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unwrap mocks base method.
func (m *MockTestDetailedUnwrapMultiError) Unwrap() []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unwrap")
	ret0, _ := ret[0].([]error)
	return ret0
}

// Unwrap indicates an expected call of Unwrap.
func (mr *MockTestDetailedUnwrapMultiErrorMockRecorder) Unwrap() *MockTestDetailedUnwrapMultiErrorUnwrapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unwrap", reflect.TypeOf((*MockTestDetailedUnwrapMultiError)(nil).Unwrap))
	return &MockTestDetailedUnwrapMultiErrorUnwrapCall{Call: call}
}

// MockTestDetailedUnwrapMultiErrorUnwrapCall wrap *gomock.Call
type MockTestDetailedUnwrapMultiErrorUnwrapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestDetailedUnwrapMultiErrorUnwrapCall) Return(arg0 []error) *MockTestDetailedUnwrapMultiErrorUnwrapCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestDetailedUnwrapMultiErrorUnwrapCall) Do(f func() []error) *MockTestDetailedUnwrapMultiErrorUnwrapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestDetailedUnwrapMultiErrorUnwrapCall) DoAndReturn(f func() []error) *MockTestDetailedUnwrapMultiErrorUnwrapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
